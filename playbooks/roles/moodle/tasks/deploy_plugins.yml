---
# Remove plug-ins
- name: "Uninstall plug-ins from {{ moodle_instance | upper() }} instance"
  shell:
    chdir: "{{ moodle_home }}"
    cmd: "php admin/cli/uninstall_plugins.php --plugins={{ item.name }} --run"
  when: item.state is defined and item.state == 'absent'
  with_items: "{{ moodle_plugins }}"
  tags: [ plugins, uninstall ]

- name: "Delete plug-in artifacts from {{ moodle_instance | upper() }} instance"
  file:
    path: "{{ moodle_home }}/{{ item.dest }}"
    state: absent
  when: item.state is defined and item.state == 'absent'
  with_items: "{{ moodle_plugins }}"
  tags: [ plugins, uninstall ]

- name: "Determine plug-ins missing from disk on {{ moodle_instance | upper() }} instance"
  shell:
    chdir: "{{ moodle_home }}"
    cmd: "php admin/cli/uninstall_plugins.php --show-missing"
  register: missing_from_disk
  tags: [ plugins, uninstall ]

# TODO Make a clean comma seperated list of plug-ins split by a tab
- name: "Purge plug-ins ({{ missing_from_disk.stdout_lines | join(', ') }}) missing from disk on {{ moodle_instance | upper() }} instance"
  shell:
    chdir: "{{ moodle_home }}"
    cmd: "php admin/cli/uninstall_plugins.php --purge-missing --run"
  tags: [ plugins, uninstall ]
# End of Remove plug-ins

# Install plug-ins
- name: "Delete patch artifacts from server"
  file:
    dest: /tmp/patches
    state: absent
  tags: [ plugins, patches ]

- name: "Copy patches temporarily to server"
  copy:
    src: patches
    dest: /tmp
  tags: [ plugins, patches ]

# Reverse applied patches for git update not to fail. However, don′t force it—
# for a clean deployment′s sake!
# See https://stackoverflow.com/q/48167884/3375584
- name: "Reverse plug-in patches"
  shell:
    chdir: "{{ moodle_home }}/{{ item.dest }}"
    cmd: "git apply --reverse /tmp/patches/{{ item.name }}/*.patch || echo Already reversed"
  when: (item.apply_patches is defined) and item.apply_patches
  with_items: "{{ moodle_plugins }}"
  tags: [ plugins, patches ]

- name: "Check out ALL THE Moodle plug-ins for {{ moodle_instance | upper() }} instance"
  git:
    accept_hostkey: yes
    repo: "{{ item.repo }}"
    version: "{{ item.version | default('HEAD') }}"
    dest: "{{ moodle_home }}/{{ item.dest }}"
    track_submodules: "{{ item.track_submodules | default('no') }}"
    update: yes
    force: "{{ git_force | default('no') }}"
  when: item.state is not defined or item.state == 'present'
  with_items: "{{ moodle_plugins }}"
  tags: [ plugins, checkout ]

- name: "Apply plug-in patches"
  shell:
    chdir: "{{ moodle_home }}/{{ item.dest }}"
    cmd: "git apply /tmp/patches/{{ item.name }}/*.patch"
  when: (item.apply_patches is defined) and item.apply_patches
  with_items: "{{ moodle_plugins }}"
  tags: [ plugins, patches ]

- name: "Delete patches from server (afterwards)"
  file:
    dest: /tmp/patches
    state: absent
  tags: [ plugins, patches ]

- name: "Copy supplemental files"
  copy:
    src: "{{ item.name }}/"
    dest: "{{ moodle_home }}/{{ item.dest }}"
  when: (item.copy_files is defined) and item.copy_files
  with_items: "{{ moodle_plugins }}"
  tags: [ plugins, files ]
# End of Install plug-ins
